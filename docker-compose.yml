version: '3.1'

volumes:
    postgres_db_data:
    portainer_data:

networks:
  traefik-net:
  postgres-net:


services:
    apiserver:
        image: waddle/webserver
        command: ["./wait-for-it.sh", "postgres-db:5432", "--", "docker-entrypoint.sh"] 
        ports:
           - "9000:9000"
        networks:
            - postgres-net
            - traefik-net
        
        environment:
            POSTGRES_HOSTNAME: postgres-db
            POSTGRES_PORT: 5432
            POSTGRES_USER: vapor
            POSTGRES_PASSWORD: vapor
            POSTGRES_DB: vapor

            HASH_KEY: Oek4YdyUFmKmq3cH7nUWmOrV1JISackQbuWf+OooD3Y=
            CIPHER_KEY: Oek4YdyUFmKmq3cH7nUWmOrV1JISackQbuWf+OooD3Y=

        deploy:
            mode: replicated
            replicas: 1
            # restart_policy:
            #     condition: on-failure
            #     delay: 10s
            #     max_attempts: 3
            #     window: 120s
            update_config:
                parallelism: 1
                delay: 10s
            labels:
                traefik.port: "9000"
                traefik.backend.loadbalancer.swarm: "true"
                traefik.frontend.entryPoints: "http"
                traefik.docker.network=traefik: "traefik-net"
                traefik.frontend.rule=Host: "reality-sucks.dd-dns.de"


    staticContentServer:
        image: waddle/webclient
        ports:
            - 8088:80

    traefik:
        image: traefik:1.4
        command:
            --entryPoints='Name:http Address::80' 
            --docker
            --docker.swarmmode
            --web
            --docker.watch
            --defaultEntryPoints=http
        ports:
            - 80:80
            - 443:443
            - 8080:8080
        networks:
            - traefik-net
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock

        deploy:
            placement:
                constraints: [node.role == manager]
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s
            restart_policy:
                condition: on-failure


    postgres-db:
        image: postgres
        ports:
            - "5432:5432"
        volumes:
            - postgres_db_data:/var/lib/postgresql/data
        networks:
            - postgres-net

        environment:
            POSTGRES_USER: vapor
            POSTGRES_DB: vapor
            POSTGRES_PASSWORD: vapor

    portainer:
        image: portainer/portainer
        ports:
           - "9001:9000"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - portainer_data:/data
        networks:
            - traefik-net
        deploy:
            placement:
                constraints: [node.role == manager]


        deploy:
            update_config:
                parallelism: 1
                delay: 10s
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 3
                window: 120s


